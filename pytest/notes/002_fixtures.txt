fixture приспособление(приблуда)
это вспомогательный код, который вызывается до, во время, после теста
---------------------------------
@pytest.fixture() декоратор, который говорит pytest, что это fixture
когда имя приспособы включается в параметры теста, pytest cперва fixture перд тестом
Если в функции есть yield, она останавливается там, передает управление тестам и переходит на следующую строку после завершения тестов. Код над yield — это «setup», а код после yield — «teardown». Код после yield, teardown, гарантированно запустится независимо от того, что происходит во время тестов
----------------------------------
Отслеживание выполнения Fixture с помощью --setup-show
так можно отследить порядок операций
pytest --setup-show test_count.py
---------------------------------
Указание области применения приспособы
Область действия по умолчанию для Fixtures — область действия функции. Это означает, что часть настройки Fixtures будет запущена перед каждым тестом, которому она нужна. Аналогично, часть демонтажа запускается после завершения теста для каждого теста.
В случаях, когда это дорого, такое поведение можно изменить, например:
@pytest.fixture(scope="module")
возможные значения:
scope='class'
scope='module'
scope='package'
scope='session'
-----------------------------
Обмен данными через conftest.py
можно положить fixtures в отдельный с названием conftest.py
-----------------------------
Поиск где Fixtures определены
pytest --fixtures -v
чтобы увидеть как исползуются в кажом тесте
pytest --fixtures-per-test test_count.py::test_empty
------------------------------
Использование нескольких уровней приспособлений
можно передавать выполнение отной fixture перед другой, напрмер db выполнится перед card_db:
@pytest.fixture(scope="session")
def db():
  ...
@pytest.fixture(scope="function")
def cards_db(db):
-------------------------
Использование нескольких fixtures для теста или другой присособы
Другой способ использования нескольких fixtures — просто использовать более одного в функции или приспособлении. Например, мы можем объединить несколько заранее подготовленных задач для тестирования в качестве приспособления.
--------------------------
Динамическое определение области применения приспособления
можно исползовать условия:
def db_scope(fixture_name, config):
  if config.getoption("--func-db", None):
    return "function"
  return "session"
потом их применять
@pytest.fixture(scope=db_scope)
-----------------------------
Использование autouse для Fixture, которые всегда используются
Можно использовать autouse=True, чтобы Fixture работало все время.
@pytest.fixture(autouse=True)
-------------------------------
Переименование фикстур
pytest позволяет переименовывать фикстуры с помощью параметра имени
@pytest.fixture(name="ultimate_answer")
полезно:
```
import pytest
from somewhere import app

@pytest.fixture(scope="session", name="app")
def _app():
  """The app object"""
  yield app()

def test_that_uses_app(app):
  hing"
```