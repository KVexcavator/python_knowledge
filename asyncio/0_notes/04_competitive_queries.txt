Конкурентные веб-запросы
Популярной библиотекой для работы с веб-запросами является requests. Она плохо совместима с asyncio, поскольку в ней используются блокирующие сокеты.
Аiohttp набор основанных на asyncio высококачественных библиотек, представляет собой полнофункциональный веб-клиент и веб-сервер
===========================
Асинхронные контекстные менеджеры.
позволяют абстрагировать логику освобождения ресурса с по­мощью блока try/finally:
with open('example.txt') as file:
  lines = file.readlines()
работает для синхронных ресурсов.
Cуществуют асинхронные контекстные менеджеры:
Асинхронный контекстный менеджер – это класс, реализующий два специальных метода-сопрограммы: 
__aenter__ асинхронно захватывает ресурс
__aexit__ закрывает ресурс
===========================
Отправка совместимых с asyncio веб-запросов с по­мощью библиотеки aiohttp.
pip install aiohttp
C веб-запросами используется понятие сеанса. Сеанс можно рассматривать как создание нового окна браузера. В этом окне можно открывать разные вебстраницы, которые могут посылать куки, сохраняемые браузером. Внутри сеанса хранится много открытых подключений, их можно при необходимости использовать повторно. Это нзывается пулом подключений.
В большинстве приложений на базе aiohttp  создается один сеанс для всего приложения. Затем объект сеанса передается методам. У объекта сеанса имеются методы для отправки веб-запросов, в том числе GET, PUT и POST. Для создания сеанса используется синтаксис async with и асинхронный контекстный менеджер aiohttp.ClientSession.
По умолчанию в сеансе ClientSession можно создатьне более 100 подключений.Чтобы изменить этот предел, можно создать экземпляр класса TCPConnector, входящего в состав aiohttp, указав максимальное число подключений, и передать его конструктору ClientSession.
---------------------------
Задание тайм-аутов в aiohttp
По умолчанию тайм-аут равен 5 мин.
ClientTimeout позволяет установить не только общий тайм-аут в секундах для всего запроса, но также отдельные тайм-ауты для установления соединения или чтения данных.
===========================
Конкурентное выполнение веб-запросов с по­мощью gather.
Для конкурентного выполнения допускающих ожидание объектов используется функция asyncio.gather. Она принимает последовательность допускающих ожидание объектов и запускает их конкурентно.(вместо asyncio.create_task)
Если среди объектов есть сопрограмма, то gather автоматически обертывает ее задачей, чтобы гарантировать конкурентное выполнение.
---------------------------
Обработка исключений при использовании gather
asyncio.gather принимает необязательный параметр, return_exceptions:
- return_exceptions=False – по умолчанию. Если хотя бы одна сопрограмма возбуждает исключение, то gather возбуждает то же исключение в точке await. Но, даже если какаято сопрограмма откажет, остальные не снимаются и продолжат работать при условии, что мы обработаем исключение и оно не приведет к остановке цикла событий и снятию задач;
- return_exceptions=True – исключения возвращаются в том же списке, что результаты.
===========================
Обработка результатов по мере поступления с по­мощью as completed.
pg118
===========================
Отслеживание незавершенных запросов с по­мощью wait.
===========================
Установка и обработка тайм-аутов для групп запросов и снятие запросов.
===========================