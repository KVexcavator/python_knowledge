Основы asyncio
как писать однопоточные конкурентные программы с применением asyncio
============================================
Сопрограмма - встретив операцию, для выполнения которой нужно заметное время приостанавливаеться.По завершении такой длительной операции сопрограмму можно «пробудить», после чего она продолжит выполнение. Пока приостановленная сопрограмма ждет завершения операции, выполняется другой код.
Слово async определяет сопрограмму, а слово await приостанавливает ее на время выполнения длительной операции.
------------------------------------------
сопрограммы не выполняются, если их вызвать напрямую
возвращается объект сопрограммы, который будет выполнен позже
------------------------------------------
Приостановка выполнения с по­мощью ключевого слова await
Встретив выражение await, интерпретатор приостанавливает родительскую сопрограмму и выполняет сопрограмму в выражении await. По ее завершении родительская сопрограмма приостанавливается и возвращенное ей значение присваивается переменной.
-----------------------------------------
Задача – это обертка вокруг сопрограммы, которая планирует выполнение последней в цикле событий как можно раньше.
Для создания задачи служит функция asyncio.create_task
------------------------------------------
Снятие задач
У каждого объекта задачи есть метод cancel, если требуется остановить задачу.
Метод задачи done возвращает True, если задача завершилась, и False в противном случае.
CancelledError может быть возбуждено только внутри предложения await
-------------------------------------------
Задание тайм-аута и снятие с по­мощью wait_for
asyncio.wait_for принимает объект сопрограммы или задачи и тайм-аут в секундах и возвращает сопрограмму, к которой можно применить await.
Если задача не завершилась в отведенное время, то возбуждается исключение TimeoutError и задача автоматически снимается.
asyncio.shield предотвращает снятие сопрограммы, снабжая ее «щитом», позволяющим игнорировать запросы на снятие
=============================================
future будущие объекты
Объект future в Python содержит одно значение, которое мы ожидаем получить в будущем, но пока еще, возможно, не получили.
в момент создания future не обертывает никакого значения, потому что его еще не существует. Объект в таком состоянии называется неполным, неразрешенным или просто неготовым. И только получив результат, мы можем установить значение объекта future, в результате чего он становится полным и из него можно извлечь результат.
=============================================
Ловушки сопрограмм и задач
Есть две основные ошибки на пути преобразования приложения в асинхронное. 
- попытка выполнить счетный код в задачах или сопрограммах, не прибегая к многопроцессности 
- использовать блокирующие API ввода-вывода, пренебрегая многопоточностью
=============================================
Ручное управление циклом событий
asyncio.run это предпочтительный метод создания цикла событий
---------------------------------------------
Создание цикла событий вручную
asyncio.new_event_loop возвращает экземпляр цикла событий, который дает доступ ко всем низкоуровневым методам, в частности методу run_until_complete, который принимает сопрограмму и исполняет ее до завершения. Закончив работу с циклом событий, мы должны закрыть его, чтобы освободить занятые ресурсы. Обычно это делается в блоке finally, чтобы цикл был закрыт даже в случае исключения
------------------------------------
Получение доступа к циклу событий
asyncio.get_running_loop
call_soon принимает функцию и выполняет ее на следующей итерации цикла
========================================
Отладочный режим
При работе в отладочном режиме печатаются полезные сообщения, когда сопрограмма или задача работают больше 100 мс. Кроме того, если для некоторой сопрограммы отсутствует await, то возбуждается исключение, показывающее, в каком месте следовало бы добавить
await.
----------------------------------------
Использование asyncio.run
asyncio.run(coroutine(), debug=True)
---------------------------------------
Использование аргументов командной строки
python3 -X dev program.py
---------------------------------------
Использование переменных окружения
PYTHONASYINCIODEBUG=1 python3 program.py