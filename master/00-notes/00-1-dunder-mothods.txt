«Dunder» – это сокращенная форма «двойной подчерк до и после». Поэтому специальные методы называются также dunder-методами.
---------------------------------------------
здесь их более 80
https://docs.python.org/3/reference/datamodel.html
---------------------------------------------
Любое использование имен вида __*__ в любом контексте, отличающееся от явно документированного, может привес­ти к ошибке без какого-либо предупреждения
--------------------------------------------
!r для получения стандартного представления отображаемых атрибутов

============================================
Имена специальных методов
--------------------------------------------
Представление в виде строк и байтов:
- __repr__, __str__, __format__, __bytes__, __fspath__
Преобразование в число:
- __bool__, __complex__, __int__, __float__, __hash__, __index__
Эмуляция коллекций:
- __len__, __getitem__, __setitem__, __delitem__, __contains__
Итерирование:
- __iter__, __aiter__, __next__, __anext__, __reversed__
Выполнение объектов, допускающих вызов, или сопрограмм:
-  __call__, __await__
Управление контекстом:
- __enter__, __exit__, __aenter__, __aexit__
Создание и уничтожение объектов:
- __new__, __init__, __del__
Управление атрибутами:
- __getattr__, __getattribute__, __setattr__, __delattr__, __dir__
Дескрипторы атрибутов:
- __get__, __set__, __delete__, __set_name__
Абстрактные базовые классы:
- __instancecheck__, __subclasscheck__
Метапрограммирование классов:
- __prepare__, _init_subclass__ __class_getitem__, __mro_entries__
==========================================
Имена специальных методов для операторов
------------------------------------------
Унарные числовые операторы:
- + abs()
__neg__ __pos__ __abs__
Операторы сравнения:
< <= == !- > >=
__lt__ __le__ __eq__ __ne__ __gt__ __ge__
Арифметические операторы:
+ - * / // % @ divmod() round() ** pow()
__add__ __sub__ __mul__ __truediv__ __floordiv__ __mod__ __matmul__ __divmod__ __round__ __pow__
Инверсные арифметические операторы:(арифметические операторы с переставленными
операндами)
__radd__ __rsub__ __rmul__ __rtruediv__ __rfloordiv__ __rmod__ __rmatmul__ __rdivmod__ __rpow__
Арифметические операторы составного присваивания:+= -= *= /= //= %= @= **=
__iadd__ __isub__ __imul__ __itruediv__ __ifloordiv__ __imod__ __imatmul__ __ipow__
Поразрядные операторы:
& | ^ << >> ~
__and__ __or__ __xor__ __lshift__ __rshift__ __invert__
Инверсные поразрядные операторы:
(поразрядные операторы с переставленными
операндами)
__rand__ __ror__ __rxor__ __rlshift__ __rrshift__
Поразрядные операторы составного присваивания:
&= |= ^= <<= >>=
__iand__ __ior__ __ixor__ __ilshift__ __irshift__
===========================================
__repr__ для получения строкового представления объекта
---------------------------------------------
__str__ вызывается конструктором str() и неявно используется в функции print. Он должен возвращать строку, пригодную для показа пользователям
---------------------------------------------
__len__ получаем способ вычисления длины
---------------------------------------------
__getitem__
- за синтаксической конструкцией obj[key] стоит специальный метод __getitem__. Для вычисления выражения my_collection[key] интерпретатор вызывает метод my_collection.__getitem__(key)
- __getitem__ поддерживает срезы, итерирование
---------------------------------------------
__contains__
если этот метод отсутствует вколлекции, то оператор in производит последовательный просмотр
---------------------------------------------
__add__  реализует +
---------------------------------------------
__mul__  реализует *
---------------------------------------------
__abs__  возвращает абсолютную величину вещественного числа – целого или с плавающей точкой – и модуль числа типа complex
---------------------------------------------
__bool__ возвращает true, false
интерпретатор принимает любой объект в булевом контексте, например в условии if
Если метод __bool__ не реализован, то Python пытается вызвать x.__len__() и при получении нуля функция bool возвращает False
--------------------------------------------