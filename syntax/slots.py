# аждый объект в Python хранит атрибуты в словаре dict, что гибко, но неэкономно. 

# __slots__ заменяет словарь на фиксированный набор атрибутов, экономя до 40% памяти.

# есть пара ограничений. Во-первых, с ним нельзя добавлять новые атрибуты. А, во-вторых, наследование требует аккуратности: если родитель имеет _ _slots_ _, потомок должен его переопределить. 

# Лучше всего _ _slots_ _  подходит для классов, которые создаются миллионами, например, узлы дерева, элементы списка и подобные.

class User: 
    def init(self, name, age): 
        self.name = name 
        self.age = age 
 
class SlotUser: 
    slots = ['name', 'age'] 
    def init(self, name, age): 
        self.name = name 
        self.age = age 
 
# Память для 100_000 объектов: 
# Обычный класс: ~15 МБ 
# Класс с slots: ~8 МБ