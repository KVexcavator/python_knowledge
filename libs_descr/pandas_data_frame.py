# DataFrame в Python — это двумерная таблица (напоминающая таблицы в SQL или Excel), которая является основной структурой данных в библиотеке pandas. Она представляет собой коллекцию строк и столбцов, где каждый столбец может содержать данные разного типа (числа, строки, даты и т. д.).
# DataFrame широко используется в анализе данных, машинном обучении и обработке больших таблиц.

# Основные характеристики DataFrame:
# - Индексация: У каждой строки есть индекс, который можно задать явно или использовать значения по умолчанию.
# - Разные типы данных: Разные столбцы могут содержать разные типы данных (int, float, string, datetime и т. д.).
# - Операции с данными: Поддерживает фильтрацию, группировку, сортировку, объединение, заполнение пропущенных значений и многое другое.
# - Интеграция с NumPy и SQL: Легко взаимодействует с массивами numpy и SQL-базами данных.

# Создание DataFrame
# Чтобы создать DataFrame, сначала нужно установить библиотеку pandas:
# ```bash
# pip install pandas
# ```

# Пример создания DataFrame из словаря:
import pandas as pd

data = {
    "Имя": ["Алиса", "Боб", "Чарли"],
    "Возраст": [25, 30, 35],
    "Город": ["Москва", "Лондон", "Нью-Йорк"]
}

df = pd.DataFrame(data)
print(df)
print("==================")

# Вывод:
#      Имя  Возраст     Город
# 0  Алиса      25   Москва
# 1    Боб      30   Лондон
# 2  Чарли      35  Нью-Йорк

# Полезные операции
# print(df.head())  # Первые 5 строк
# print(df.info())  # Информация о DataFrame
# print(df.describe())  # Статистика по числовым столбцам
# print(df["Город"].value_counts())  # Подсчет количества уникальных значений
# print(df[df["Возраст"] > 28])  # Фильтрация данных

# Самые используемые команды Python для очистки данных.
# Обработка пропущенных данных

# df.isnull().sum() # количество пропущенных значений
# df.dropna() # удаление строк с пропусками
# df.fillna(value) # заполнение пропусков

# Очистка и трансформация данных

# df.drop_duplicates() # удаление дубликатов
# df.rename(columns={'old': 'new'}) # переименование колонок
# df.astype({'col': 'type'}) # изменение типа данных
# df.replace({'old': 'new'}) # замена значений
# df.reset_index() # сброс индекса
# df.drop(['col'], axis=1) # удаление колонок

# Выбор и фильтрация данных

# df.loc['label', 'col'] # выбор по метке
# df.iloc[] # выбор по индексу
# df[df['col'] > value] # фильтрация

# Агрегация и анализ данных

# df.groupby('col').agg('mean') # группировка и агрегация
# df.sort_values('col', ascending=False) # сортировка
# df.value_counts() # количество уникальных значений
# df.apply() # применение функции
# df.pivot_table(values, index, columns) # сводная таблица

# Объединение данных

# pd.concat([df1, df2]) # объединение DataFrame
# pd.merge(df1, df2, on='key') # слияние по ключу
# df1.join(df2) # объединение по индексу
# df1.append(df2) # добавление строк

